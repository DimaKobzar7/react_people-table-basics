{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/Navbar/Navbar.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","components/Loader/Loader.tsx","api.ts","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["PageNavLink","to","text","end","className","isActive","classNames","Navbar","role","PersonLink","name","sex","slug","PeopleTable","people","selectedPersonSlug","error","person","length","map","born","died","fatherName","motherName","mother","father","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","setError","useEffect","peopleFromServer","peopleWithFatherAndMotherData","find","somebodyName","catch","finally","useParams","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.2379b86b.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string\n  text: string\n  end?: boolean\n};\n\nexport const PageNavLink: React.FC<Props> = ({ to, text, end = false }) => (\n  <NavLink\n    className={({ isActive }) => classNames(\n      'navbar-item', {\n        'has-background-grey-lighter': isActive,\n      },\n    )}\n    to={to}\n    end={end}\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from '../PageNavLink/PageNavLink';\n\nexport const Navbar: React.FC = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n        <PageNavLink to=\"/people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n  name: string\n  sex: string\n  slug: string\n};\n\nexport const PersonLink: React.FC<Props> = ({ name, sex, slug }) => (\n  <Link\n    to={`/people/${slug}`}\n    className={classNames({\n      'has-text-danger': sex === 'f',\n    })}\n  >\n    {name}\n  </Link>\n);\n","import React from 'react';\n\nimport classNames from 'classnames';\n\nimport { Person } from '../../types';\n\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ntype Props = {\n  people: Person[] | null\n  selectedPersonSlug: string\n  error: string\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  selectedPersonSlug,\n  error,\n}) => {\n  const isActive = (person: Person) => person.slug === selectedPersonSlug;\n\n  return (\n    <>\n      {error}\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n\n        {people?.length && (\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Sex</th>\n              <th>Born</th>\n              <th>Died</th>\n              <th>Mother</th>\n              <th>Father</th>\n            </tr>\n          </thead>\n        )}\n\n        <tbody>\n          {people?.map(person => {\n            const {\n              born,\n              died,\n              fatherName,\n              motherName,\n              name,\n              sex,\n              slug,\n            } = person;\n\n            return (\n              <tr\n                data-cy=\"person\"\n                key={slug}\n                className={classNames({\n                  'has-background-warning': isActive(person),\n                })}\n              >\n                <td>\n                  <PersonLink name={name} sex={sex} slug={slug} />\n                </td>\n\n                <td>{sex}</td>\n                <td>{born}</td>\n                <td>{died}</td>\n                <td>\n                  {person.mother ? (\n                    <PersonLink\n                      name={person.mother.name}\n                      sex={person.mother.sex}\n                      slug={person.mother.slug}\n                    />\n                  ) : motherName || '-'}\n                </td>\n                <td>\n                  {person.father ? (\n                    <PersonLink\n                      name={person.father.name}\n                      sex={person.father.sex}\n                      slug={person.father.slug}\n                    />\n                  ) : fatherName || '-'}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport { Person } from '../../types';\n\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\n\nimport { Loader } from '../Loader/Loader';\n\nimport { getPeople } from '../../api';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(peopleFromServer => {\n        const peopleWithFatherAndMotherData = peopleFromServer.map(person => ({\n          ...person,\n          mother: peopleFromServer\n            .find(somebodyName => person.motherName === somebodyName.name),\n          father: peopleFromServer\n            .find(somebodyName => person.fatherName === somebodyName.name),\n\n        }));\n\n        if (peopleWithFatherAndMotherData.length === 0) {\n          setError('There are no people on the server');\n        }\n\n        setPeople(peopleWithFatherAndMotherData);\n      })\n      .catch(() => {\n        setError('Something went wrong');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const { selectedPersonSlug = 'carolus-haverbeke-1832' } = useParams();\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n          {!isLoading\n            && (\n              <PeopleTable\n                people={people}\n                selectedPersonSlug={selectedPersonSlug}\n                error={error}\n              />\n            )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nimport {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport { Navbar } from './components/Navbar/Navbar';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={<h1 className=\"title\">Home Page</h1>}\n            />\n            <Route\n              path=\"home\"\n              element={<Navigate to=\"/\" replace />}\n            />\n            <Route path=\"/people\">\n              <Route\n                index\n                element={(\n                  <>\n                    <PeoplePage />\n                  </>\n                )}\n              />\n              <Route\n                path=\":selectedPersonSlug\"\n                element={(\n                  <PeoplePage />\n                )}\n              />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n// import React from 'react';\n\n// import {\n//   Navigate,\n//   Route,\n//   Routes,\n// } from 'react-router-dom';\n\n// import { Navbar } from './components/Navbar/Navbar';\n// import { PeoplePage } from './components/PeoplePage/PeoplePage';\n\n// import './App.scss';\n\n// export const App: React.FC = () => {\n//   return (\n//     <div data-cy=\"app\">\n//       <Navbar />\n\n//       <main className=\"section\">\n//         <div className=\"container\">\n//           <Routes>\n//             <Route\n//               path=\"/\"\n//               element={<h1 className=\"title\">Home Page</h1>}\n//             />\n//             <Route\n//               path=\"home\"\n//               element={<Navigate to=\"/\" replace />}\n//             />\n//             <Route path=\"/people\">\n//               <Route\n//                 // ставим индекс и он значит адрес что в обертке то есть /people\n//                 index\n//                 element={(\n//                   <>\n//                     {/* <h1 className=\"title\">People Page</h1> */}\n//                     <PeoplePage />\n//                   </>\n//                 )}\n//               />\n//               <Route\n//                 // то что после : оно должно бть в юз парамс хуке\n//                 // этот адрес нужен чтобы вместе со слагом тоже генреилась таблица но\n//                 // урл был изменен и в таблице сработает функция сравнения и класс активный поменяется\n//                 // оставляем просто :selectedPersonSlug так как /people подставится из верхнего роута\n//                 path=\":selectedPersonSlug\"\n//                 element={(\n//                   <PeoplePage />\n//                 )}\n//               />\n//             </Route>\n//             <Route\n//               path=\"*\"\n//               element={<h1 className=\"title\">Page not found</h1>}\n//             />\n//           </Routes>\n//         </div>\n//       </main>\n//     </div>\n//   );\n// };\n\n// import { NavLink } from 'react-router-dom';\n// import classNames from 'classnames';\n\n// type Props = {\n//   to: string\n//   text: string\n//   end?: boolean\n// };\n\n// // end нужен на случай если он потом кому то понадобится\n// export const PageNavLink: React.FC<Props> = ({ to, text, end = false }) => (\n//   <NavLink\n//     className={({ isActive }) => classNames(\n//       'navbar-item', {\n//         'has-background-grey-lighter': isActive,\n//       },\n//     )}\n//     to={to}\n//     // end не дает при смене пути например добавляется слаг оставатся активной ссылке\n//     end={end}\n//   >\n//     {text}\n//   </NavLink>\n// );\n\n// import React, { useEffect, useState } from 'react';\n\n// import { useParams } from 'react-router-dom';\n\n// import { Person } from '../../types';\n\n// import { PeopleTable } from '../PeopleTable/PeopleTable';\n\n// import { Loader } from '../Loader/Loader';\n\n// import { getPeople } from '../../api';\n\n// export const PeoplePage: React.FC = () => {\n//   const [people, setPeople] = useState<Person[] | null>(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     setIsLoading(true);\n\n//     getPeople()\n//       .then(peopleFromServer => {\n//         const peopleWithFatherAndMotherData = peopleFromServer.map(person => ({\n//           ...person,\n//           mother: peopleFromServer\n//           // тут я ищу сравнение с именем человека и именем его матери\n//           // когда есть соответствие я получаю объект и свойство нейм этого полученого объекта оно и есть имя матери человека к которому я искал мать\n//             .find(somebodyName => person.motherName === somebodyName.name),\n//           father: peopleFromServer\n//             .find(somebodyName => person.fatherName === somebodyName.name),\n\n//         }));\n\n//         if (peopleWithFatherAndMotherData.length === 0) {\n//           setError('There are no people on the server');\n//         }\n\n//         setPeople(peopleWithFatherAndMotherData);\n//       })\n//       .catch(() => {\n//         setError('Something went wrong');\n//       })\n//       .finally(() => {\n//         setIsLoading(false);\n//       });\n//   }, []);\n\n//   const { selectedPersonSlug = 'carolus-haverbeke-1832' } = useParams();\n\n//   return (\n//     <>\n//       <h1 className=\"title\">People Page</h1>\n//       <div className=\"block\">\n//         <div className=\"box table-container\">\n//           {isLoading && <Loader />}\n//           {!isLoading\n//             && (\n//               <PeopleTable\n//                 people={people}\n//                 selectedPersonSlug={selectedPersonSlug}\n//                 error={error}\n//               />\n//             )}\n//         </div>\n//       </div>\n//     </>\n//   );\n// };\n\n// пока массив не заполнился данными из сервера то это условие работает и скрывает этот кусок\n//  {people?.length && ( это условие на показ шапки таблицы в пиплтейбл\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}